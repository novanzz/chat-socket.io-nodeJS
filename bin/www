#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('rskd:server');
var http = require('http');
var server = http.createServer(app);

var io = require('socket.io').listen(server);;
users = [{}];
whisper = [];
allMsg = [];



//socketIO server
io.sockets.on('connection',function(socket){
  //console.log('Berhasil connect');

  socket.on('new user',function(data,callback){
    if (data in users){
      callback (false);
    }else{
      callback(true);
      socket.username = data; 
      users[socket.username] = socket ;
      updateUsernames(); 
    } 
  }); 

  //update Usernames
  function updateUsernames(){
    io.sockets.emit('usernames',Object.keys(users)) ;
  }
  
  //send private message
  socket.on('send messageP', function(data, callback){
    var msg = data ;
    console.log(msg);
    if( msg.msg.substr(0,3) === '/w '){
        msg = msg.msg.substr(3);
        var ind = msg.indexOf(' ');
        if (ind !== -1 ) {
          console.log('step 1', msg);
          var nama = msg.substring(0,ind);
           console.log('step 2', nama);
          var msg = msg.substring(ind + 1);
           console.log('step 3', msg);
          if (nama === socket.username){
              callback('error| salah nama tujuan');
          }else if(nama in users){
              whisper.push({msg : msg,  user:socket.username });
              console.log('step 4', whisper);
              users[nama].emit('whisper',{msg: whisper , user: whisper});
              users[socket.username].emit('whisper',{msg: whisper, user:whisper});
              io.sockets.emit('notify whisper',{msg : msg, user: socket.username});
          }else{
              callback('error| salah nama tujuan');
          }
        }else{
          callback('error| untuk pesan privasi  = /w Nama Tujuan Pesan');
        }
    }else{
        callback('error| untuk pesan privasi  = /w Nama Tujuan Pesan');
      
    }
   
  });
    // messages.push(data);
    socket.on('send message', function(data) {
        allMsg.push(data);
        console.log(allMsg);
        io.sockets.emit('new message', {msg: allMsg, user: socket.username});
    });

  //disconnect user
  socket.on('disconnect',function(data){
    if(!socket.username)return;
    delete users[socket.username];
    updateUsernames();
  });

});

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2000');
app.set('port', port);

/**
 * Create HTTP server.
 */



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
